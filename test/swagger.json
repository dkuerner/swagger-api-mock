{
  "swagger": "2.0",
  "info": {
    "description": "Example API",
    "version": "1.0.0",
    "title": "Example API for Swagger API Mock node module",
    "contact": {
      "email": "sergey.myasnikov@daimler.com"
    }
  },
  "host": "api.example.com",
  "basePath": "/v1",
  "tags": [
    {
      "name": "products",
      "description": "Access products"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Product list",
        "description": "Returns product list",
        "operationId": "getProducts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Category filter for returned products",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Add products",
        "description": "Create new products",
        "operationId": "addProducts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "An array of product objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid Products"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get product by id",
        "description": "Get product by id",
        "operationId": "getProductById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 5,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": [
          "products"
        ],
        "summary": "Updated product",
        "description": "Update product.",
        "operationId": "updateProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated product object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid Order supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "products"
        ],
        "summary": "Delete product by ID",
        "description": "Delete product",
        "operationId": "deleteProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product that needs to be deleted",
            "required": true,
            "type": "string",
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Unique identifier representing a specific product."
        },
        "category" : {
          "type": "string",
          "description": "Category name"
        },
        "title": {
          "type": "string",
          "description": "Product name"
        },
        "images": {
          "type": "array",
          "description": "Product images",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "Image": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier representing a specific image."
        },
        "title": {
          "type": "string",
          "description": "Image name"
        },
        "url": {
          "type": "string",
          "description": "Image url",
          "pattern": "im[a-z0-9]{5,20}\\.(jpg|png)"
        }
      },
      "required": [
        "id",
        "title",
        "url"
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64",
          "description": "Error code"
        },
        "message": {
          "type": "string",
          "description": "Error message"
        },
        "fields": {
          "type": "string",
          "description": "Invalid fields/objects comma separated list"
        }
      },
      "required": [
        "code"
      ]
    }
  }
}